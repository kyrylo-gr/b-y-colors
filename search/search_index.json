{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"python/","title":"B/Y Colors","text":"<p>A Python package for working with colors, providing an intuitive interface for color manipulation, transformation, and variant generation. Based palette is blue and yellow, which gives the name of the package.</p>"},{"location":"python/#features","title":"Features","text":"<ul> <li>Simple and intuitive color manipulation</li> <li>Support for RGB, RGBA, and HEX color formats</li> <li>Color brightness adjustment (relative and absolute)</li> <li>Opacity/transparency control</li> <li>Automatic dark and light variant generation</li> <li>Background color compositing for transparent colors</li> </ul>"},{"location":"python/#installation","title":"Installation","text":"<p>Install using pip:</p> <pre><code>pip install bycolors\n</code></pre>"},{"location":"python/#quick-start","title":"Quick Start","text":"<p>Each color is a tuple provided by the <code>ColorClass</code>. The color class provides a number of methods for color manipulation.  </p> <pre><code>from bycolors import colors as byc\n\n# Basic color usage\nblue = byc.blue\nyellow = byc.yellow\n\n# Color variants\ndark_blue = blue.dark\nlight_yellow = yellow.light\n\n# Custom brightness\ncustom_blue = blue.brightness(0.7)  # 70% brightness\nvery_dark = blue.absolute_brightness(0.2)  # 20% absolute brightness\n\n# Transparency\nsemi_transparent = blue.opacity(0.5)\nfully_transparent = blue.transparent\n\n# Color format conversion\n# here for illustration blue is a perfect blue (#0000FF)\nrgb_values = blue.rgb        # (0, 0, 1)\nrgba_values = blue.rgba      # (0, 0, 1, 1)\nhex_value = blue.hex         # \"#0000FF\"\n\n# Custom background for transparent colors\nblue_on_white = blue.opacity(0.5, background_color=(1, 1, 1)).rgb  # (0.5, 0.5, 1)\n</code></pre>"},{"location":"python/#contributing","title":"Contributing","text":"<p>Contributions are welcome! For any suggestions or issues:</p> <ol> <li>Open an issue to discuss the proposed changes</li> <li>Fork the repository</li> <li>Create a pull request</li> </ol>"},{"location":"python/#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"python/cmap/","title":"bycolors.cmap","text":"<pre><code>\nfrom bycolors import colors as byc\n\ncmap = byc.cmap(byc.blue, byc.white, byc.yellow)\n\ncmap_blue_yellow = byc.gradient.blue_yellow\n\n# Or any defined color\ncmap_red_orange = byc.gradient.red_orange\n</code></pre>"},{"location":"python/color_class/","title":"Color Class","text":"<p>The <code>ColorClass</code> is the core class of the bycolors package, providing a rich interface for color manipulation and transformation.</p>"},{"location":"python/color_class/#constructor","title":"Constructor","text":"<pre><code>ColorClass(palette: Union[str, Tuple[float, float, float], Dict], background_color: Optional[Tuple[float, float, float]] = None)\n</code></pre>"},{"location":"python/color_class/#parameters","title":"Parameters","text":"<ul> <li> <p><code>palette</code>: The color value. Can be:</p> <ul> <li>A hex string (e.g., \"#FF0000\")</li> <li>An RGB/RGBA tuple (e.g., (1, 0, 0) or (1, 0, 0, 1))</li> <li>A dictionary with 'main', 'dark', and 'light' variants</li> </ul> </li> <li> <p><code>background_color</code>: Optional RGB tuple for alpha compositing. Defaults to white (1, 1, 1)</p> </li> </ul>"},{"location":"python/color_class/#properties","title":"Properties","text":""},{"location":"python/color_class/#color-variants","title":"Color Variants","text":"<ul> <li><code>.dark</code>: Get a darker variant of the color (35% brightness if not specified in palette)</li> <li><code>.light</code>: Get a lighter variant of the color (65% brightness if not specified in palette)</li> <li><code>.main</code>: Get the main color instance</li> <li><code>.transparent</code>: Get a fully transparent version of the color</li> </ul>"},{"location":"python/color_class/#color-formats","title":"Color Formats","text":"<ul> <li><code>.rgb</code>: Get RGB values (0-1 range)</li> <li><code>.rgba</code>: Get RGBA values (0-1 range)</li> <li><code>.hex</code>: Get hexadecimal color string</li> </ul>"},{"location":"python/color_class/#methods","title":"Methods","text":""},{"location":"python/color_class/#opacity-control","title":"Opacity Control","text":"<pre><code>.opacity(opacity: float, background_color: Optional[Tuple[float, float, float]] = None)\n.alpha(alpha: float, background_color: Optional[Tuple[float, float, float]] = None)  # alias for opacity\n</code></pre> <p>Control the transparency of the color. Values range from 0 (transparent) to 1 (opaque).</p>"},{"location":"python/color_class/#brightness-control","title":"Brightness Control","text":"<pre><code>.brightness(brightness: float)  # Relative brightness change\n.absolute_brightness(brightness: float)  # Absolute brightness value\n</code></pre> <p>Adjust the color brightness: - <code>brightness()</code>: Values &lt; 0.5 darken, &gt; 0.5 lighten - <code>absolute_brightness()</code>: Set exact brightness (0 = black, 1 = white)</p>"},{"location":"python/color_class/#examples","title":"Examples","text":"<pre><code># Create a color\nblue = ColorClass(\"#0000FF\")\n\n# Get variants\ndark_blue = blue.dark\nlight_blue = blue.light\n\n# Modify opacity\nsemi_transparent = blue.opacity(0.5)\nsemi_transparent_on_black = blue.opacity(0.5, background_color=(0, 0, 0))\n\n# Adjust brightness\ndarker = blue.brightness(0.3)\nspecific_brightness = blue.absolute_brightness(0.7)\n\n# Get color values\nrgb = blue.rgb        # (0, 0, 1)\nrgba = blue.rgba      # (0, 0, 1, 1)\nhex_color = blue.hex  # \"#0000FF\"\n</code></pre>"},{"location":"python/color_class/#bycolors.color_class.ColorClass","title":"bycolors.color_class.ColorClass","text":"<p>               Bases: <code>tuple</code></p> <p>A class representing a color with various manipulation capabilities.</p> <p>The ColorClass extends tuple to represent colors in RGB or RGBA format while providing methods for color manipulation like brightness adjustment, opacity changes, and color variant access (dark/light).</p> <p>Parameters:</p> Name Type Description Default <code>palette</code> <code>_PALETTE_TYPE | str | tuple[int, int, int] | tuple[int, int, int, int] | None</code> <p>The color value, can be a hex string, RGB/RGBA tuple, or a palette dictionary with 'main', 'dark', and 'light' variants.</p> <code>None</code> <code>background_color</code> <code>_RGB_TYPE | None</code> <p>The background color used for alpha compositing. Defaults to white (1, 1, 1).</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; blue = ColorClass(\"#0000FF\")\n&gt;&gt;&gt; semi_transparent = blue.opacity(0.5)\n&gt;&gt;&gt; darker_blue = blue.brightness(0.35)\n&gt;&gt;&gt; rgb_values = blue.rgb  # (0, 0, 1)\n</code></pre> Source code in <code>python/bycolors/color_class.py</code> <pre><code>class ColorClass(tuple):\n    \"\"\"A class representing a color with various manipulation capabilities.\n\n    The ColorClass extends tuple to represent colors in RGB or RGBA format while providing\n    methods for color manipulation like brightness adjustment, opacity changes, and color\n    variant access (dark/light).\n\n    Args:\n        palette (_PALETTE_TYPE | str | tuple[int, int, int] | tuple[int, int, int, int] | None):\n            The color value, can be a hex string, RGB/RGBA tuple, or a palette dictionary\n            with 'main', 'dark', and 'light' variants.\n        background_color (_RGB_TYPE | None): The background color used for alpha compositing.\n            Defaults to white (1, 1, 1).\n\n    Examples:\n        &gt;&gt;&gt; blue = ColorClass(\"#0000FF\")\n        &gt;&gt;&gt; semi_transparent = blue.opacity(0.5)\n        &gt;&gt;&gt; darker_blue = blue.brightness(0.35)\n        &gt;&gt;&gt; rgb_values = blue.rgb  # (0, 0, 1)\n    \"\"\"\n\n    def __new__(cls, palette: _POSSIBLE_COLOR_INIT_TYPES | None = None, **kwargs):\n        main_color = convert_to_rgb(palette)\n        return super().__new__(cls, main_color)\n\n    def __init__(\n        self,\n        palette: _POSSIBLE_COLOR_INIT_TYPES | None = None,\n        background_color: _RGB_TYPE | None = None,\n    ):\n        self.palette = convert_to_palette(palette)\n        self.main_color = self.palette[\"main\"]\n        self._background_color = (\n            convert_to_rgb(background_color) if background_color else (1, 1, 1)\n        )\n\n    @property\n    def dark(self):\n        \"\"\"Returns a darker variant of the color.\n\n        If a dark variant is defined in the palette, returns that.\n        Otherwise, returns a color with 35% brightness of the original.\n\n        Returns:\n            ColorClass: A new color instance with darker values.\n        \"\"\"\n        if \"dark\" in self.palette:\n            return self._new_color(self.palette[\"dark\"])\n        else:\n            return self.brightness(0.35)\n\n    @property\n    def light(self):\n        \"\"\"Returns a lighter variant of the color.\n\n        If a light variant is defined in the palette, returns that.\n        Otherwise, returns a color with 65% brightness of the original.\n\n        Returns:\n            ColorClass: A new color instance with lighter values.\n        \"\"\"\n        if \"light\" in self.palette:\n            return self._new_color(self.palette[\"light\"])\n        else:\n            return self.brightness(0.65)\n\n    @property\n    def main(self):\n        \"\"\"Returns the main color instance.\n\n        Returns:\n            ColorClass: The current color instance.\n        \"\"\"\n        return self\n\n    @property\n    def hex(self):\n        \"\"\"Returns the color in hexadecimal format.\n\n        Returns:\n            str: Color in hex format (e.g., \"#FF0000\" for red).\n        \"\"\"\n        return rgb_to_hex(self.rgb)\n\n    @property\n    def rgba(self):\n        \"\"\"Returns the color as RGBA values.\n\n        Returns:\n            tuple[float, float, float, float]: Color as RGBA values between 0 and 1.\n        \"\"\"\n        return rgb_to_rgba(self.main_color)\n\n    @property\n    def rgb(self):\n        \"\"\"Returns the color as RGB values, handling alpha compositing if needed.\n\n        If the color has alpha &lt; 1, performs alpha compositing with the background color.\n\n        Returns:\n            tuple[float, float, float]: Color as RGB values between 0 and 1.\n        \"\"\"\n        if len(self.main_color) &gt; 3 and self.main_color[3] &lt; 1.0:\n            alpha = self.main_color[3]\n            rgb = self.main_color[:3]\n            return tuple(\n                c * alpha + (1 - alpha) * self._background_color[i]\n                for i, c in enumerate(rgb)\n            )\n        return self.main_color[:3]\n\n    def alpha(self, alpha: float, background_color: _RGB_TYPE | None = None):\n        \"\"\"Alias for opacity method.\n\n        Args:\n            alpha (float): Alpha value between 0 and 1.\n            background_color (_RGB_TYPE | None): Optional background color for compositing.\n\n        Returns:\n            ColorClass: New color instance with modified alpha.\n        \"\"\"\n        return self.opacity(alpha, background_color)\n\n    def opacity(self, opacity: float, background_color: _RGB_TYPE | None = None):\n        \"\"\"Creates a new color with modified opacity.\n\n        Args:\n            opacity (float): Opacity value between 0 and 1.\n            background_color (_RGB_TYPE | None): Optional background color for compositing.\n\n        Returns:\n            ColorClass: New color instance with modified opacity.\n        \"\"\"\n        return self._new_color(\n            change_alpha(self.main_color, opacity), background_color=background_color\n        )\n\n    def brightness(self, brightness: float):\n        \"\"\"Changes the brightness of the color relatively.\n\n        Args:\n            brightness (float): Target brightness between 0 and 1.\n                Values &lt; 0.5 darken the color, values &gt; 0.5 lighten it.\n\n        Returns:\n            ColorClass: New color instance with modified brightness.\n        \"\"\"\n        return self._new_color(\n            change_brightness_relatively(self.main_color, brightness)\n        )\n\n    def absolute_brightness(self, brightness: float):\n        \"\"\"Changes the brightness of the color to an absolute value.\n\n        Args:\n            brightness (float): Target brightness between 0 and 1.\n                0 is black, 1 is white.\n\n        Returns:\n            ColorClass: New color instance with modified brightness.\n        \"\"\"\n        return self._new_color(\n            change_brightness_absolutely(self.main_color, brightness)\n        )\n\n    @property\n    def transparent(self):\n        \"\"\"Returns a fully transparent version of the color.\n\n        Returns:\n            ColorClass: New color instance with zero opacity.\n        \"\"\"\n        return self._new_color(change_alpha(self.main_color, 0))\n\n    def _new_color(self, color: _RGB_TYPE, background_color: _RGB_TYPE | None = None):\n        \"\"\"Creates a new color instance with the same configuration.\n\n        Args:\n            color (_RGB_TYPE): The new color values.\n            background_color (_RGB_TYPE | None): Optional background color for compositing.\n\n        Returns:\n            ColorClass: New color instance.\n        \"\"\"\n        if background_color is None:\n            background_color = self._background_color\n        return self.__class__(color, background_color=background_color)\n</code></pre>"},{"location":"python/color_class/#bycolors.color_class.ColorClass.dark","title":"dark  <code>property</code>","text":"<pre><code>dark\n</code></pre> <p>Returns a darker variant of the color.</p> <p>If a dark variant is defined in the palette, returns that. Otherwise, returns a color with 35% brightness of the original.</p> <p>Returns:</p> Name Type Description <code>ColorClass</code> <p>A new color instance with darker values.</p>"},{"location":"python/color_class/#bycolors.color_class.ColorClass.hex","title":"hex  <code>property</code>","text":"<pre><code>hex\n</code></pre> <p>Returns the color in hexadecimal format.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Color in hex format (e.g., \"#FF0000\" for red).</p>"},{"location":"python/color_class/#bycolors.color_class.ColorClass.light","title":"light  <code>property</code>","text":"<pre><code>light\n</code></pre> <p>Returns a lighter variant of the color.</p> <p>If a light variant is defined in the palette, returns that. Otherwise, returns a color with 65% brightness of the original.</p> <p>Returns:</p> Name Type Description <code>ColorClass</code> <p>A new color instance with lighter values.</p>"},{"location":"python/color_class/#bycolors.color_class.ColorClass.main","title":"main  <code>property</code>","text":"<pre><code>main\n</code></pre> <p>Returns the main color instance.</p> <p>Returns:</p> Name Type Description <code>ColorClass</code> <p>The current color instance.</p>"},{"location":"python/color_class/#bycolors.color_class.ColorClass.rgb","title":"rgb  <code>property</code>","text":"<pre><code>rgb\n</code></pre> <p>Returns the color as RGB values, handling alpha compositing if needed.</p> <p>If the color has alpha &lt; 1, performs alpha compositing with the background color.</p> <p>Returns:</p> Type Description <p>tuple[float, float, float]: Color as RGB values between 0 and 1.</p>"},{"location":"python/color_class/#bycolors.color_class.ColorClass.rgba","title":"rgba  <code>property</code>","text":"<pre><code>rgba\n</code></pre> <p>Returns the color as RGBA values.</p> <p>Returns:</p> Type Description <p>tuple[float, float, float, float]: Color as RGBA values between 0 and 1.</p>"},{"location":"python/color_class/#bycolors.color_class.ColorClass.transparent","title":"transparent  <code>property</code>","text":"<pre><code>transparent\n</code></pre> <p>Returns a fully transparent version of the color.</p> <p>Returns:</p> Name Type Description <code>ColorClass</code> <p>New color instance with zero opacity.</p>"},{"location":"python/color_class/#bycolors.color_class.ColorClass.absolute_brightness","title":"absolute_brightness","text":"<pre><code>absolute_brightness(brightness)\n</code></pre> <p>Changes the brightness of the color to an absolute value.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>float</code> <p>Target brightness between 0 and 1. 0 is black, 1 is white.</p> required <p>Returns:</p> Name Type Description <code>ColorClass</code> <p>New color instance with modified brightness.</p> Source code in <code>python/bycolors/color_class.py</code> <pre><code>def absolute_brightness(self, brightness: float):\n    \"\"\"Changes the brightness of the color to an absolute value.\n\n    Args:\n        brightness (float): Target brightness between 0 and 1.\n            0 is black, 1 is white.\n\n    Returns:\n        ColorClass: New color instance with modified brightness.\n    \"\"\"\n    return self._new_color(\n        change_brightness_absolutely(self.main_color, brightness)\n    )\n</code></pre>"},{"location":"python/color_class/#bycolors.color_class.ColorClass.alpha","title":"alpha","text":"<pre><code>alpha(alpha, background_color=None)\n</code></pre> <p>Alias for opacity method.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>Alpha value between 0 and 1.</p> required <code>background_color</code> <code>_RGB_TYPE | None</code> <p>Optional background color for compositing.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ColorClass</code> <p>New color instance with modified alpha.</p> Source code in <code>python/bycolors/color_class.py</code> <pre><code>def alpha(self, alpha: float, background_color: _RGB_TYPE | None = None):\n    \"\"\"Alias for opacity method.\n\n    Args:\n        alpha (float): Alpha value between 0 and 1.\n        background_color (_RGB_TYPE | None): Optional background color for compositing.\n\n    Returns:\n        ColorClass: New color instance with modified alpha.\n    \"\"\"\n    return self.opacity(alpha, background_color)\n</code></pre>"},{"location":"python/color_class/#bycolors.color_class.ColorClass.brightness","title":"brightness","text":"<pre><code>brightness(brightness)\n</code></pre> <p>Changes the brightness of the color relatively.</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <code>float</code> <p>Target brightness between 0 and 1. Values &lt; 0.5 darken the color, values &gt; 0.5 lighten it.</p> required <p>Returns:</p> Name Type Description <code>ColorClass</code> <p>New color instance with modified brightness.</p> Source code in <code>python/bycolors/color_class.py</code> <pre><code>def brightness(self, brightness: float):\n    \"\"\"Changes the brightness of the color relatively.\n\n    Args:\n        brightness (float): Target brightness between 0 and 1.\n            Values &lt; 0.5 darken the color, values &gt; 0.5 lighten it.\n\n    Returns:\n        ColorClass: New color instance with modified brightness.\n    \"\"\"\n    return self._new_color(\n        change_brightness_relatively(self.main_color, brightness)\n    )\n</code></pre>"},{"location":"python/color_class/#bycolors.color_class.ColorClass.opacity","title":"opacity","text":"<pre><code>opacity(opacity, background_color=None)\n</code></pre> <p>Creates a new color with modified opacity.</p> <p>Parameters:</p> Name Type Description Default <code>opacity</code> <code>float</code> <p>Opacity value between 0 and 1.</p> required <code>background_color</code> <code>_RGB_TYPE | None</code> <p>Optional background color for compositing.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ColorClass</code> <p>New color instance with modified opacity.</p> Source code in <code>python/bycolors/color_class.py</code> <pre><code>def opacity(self, opacity: float, background_color: _RGB_TYPE | None = None):\n    \"\"\"Creates a new color with modified opacity.\n\n    Args:\n        opacity (float): Opacity value between 0 and 1.\n        background_color (_RGB_TYPE | None): Optional background color for compositing.\n\n    Returns:\n        ColorClass: New color instance with modified opacity.\n    \"\"\"\n    return self._new_color(\n        change_alpha(self.main_color, opacity), background_color=background_color\n    )\n</code></pre>"}]}